// Generated by kea-typegen on Wed, 14 Jul 2021 07:36:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import { Logic } from 'kea'

import { DeepPartial, DeepPartialMap, ValidationErrorType } from '../../node_modules/kea-forms'

export interface formsLogicType<UserFormType> extends Logic {
  actionCreators: {
    setUserFormValue: (
      key: string,
      value: any
    ) => {
      type: 'set user form value (src.forms.formsLogic)'
      payload: {
        values: Partial<UserFormType>
      }
    }
    setUserFormValues: (values: Partial<UserFormType>) => {
      type: 'set user form values (src.forms.formsLogic)'
      payload: {
        values: Partial<UserFormType>
      }
    }
    touchUserFormField: (key: string) => {
      type: 'touch user form field (src.forms.formsLogic)'
      payload: {
        key: string
      }
    }
    resetUserForm: (values?: UserFormType) => {
      type: 'reset user form (src.forms.formsLogic)'
      payload: {
        values?: UserFormType
      }
    }
    submitUserForm: () => {
      type: 'submit user form (src.forms.formsLogic)'
      payload: {
        value: boolean
      }
    }
    submitUserFormRequest: (userForm: UserFormType) => {
      type: 'submit user form request (src.forms.formsLogic)'
      payload: {
        userForm: UserFormType
      }
    }
    submitUserFormSuccess: (userForm: UserFormType) => {
      type: 'submit user form success (src.forms.formsLogic)'
      payload: {
        userForm: UserFormType
      }
    }
    submitUserFormFailure: (error: Error) => {
      type: 'submit user form failure (src.forms.formsLogic)'
      payload: {
        error: Error
      }
    }
  }
  actionKeys: {
    'set user form value (src.forms.formsLogic)': 'setUserFormValue'
    'set user form values (src.forms.formsLogic)': 'setUserFormValues'
    'touch user form field (src.forms.formsLogic)': 'touchUserFormField'
    'reset user form (src.forms.formsLogic)': 'resetUserForm'
    'submit user form (src.forms.formsLogic)': 'submitUserForm'
    'submit user form request (src.forms.formsLogic)': 'submitUserFormRequest'
    'submit user form success (src.forms.formsLogic)': 'submitUserFormSuccess'
    'submit user form failure (src.forms.formsLogic)': 'submitUserFormFailure'
  }
  actionTypes: {
    setUserFormValue: 'set user form value (src.forms.formsLogic)'
    setUserFormValues: 'set user form values (src.forms.formsLogic)'
    touchUserFormField: 'touch user form field (src.forms.formsLogic)'
    resetUserForm: 'reset user form (src.forms.formsLogic)'
    submitUserForm: 'submit user form (src.forms.formsLogic)'
    submitUserFormRequest: 'submit user form request (src.forms.formsLogic)'
    submitUserFormSuccess: 'submit user form success (src.forms.formsLogic)'
    submitUserFormFailure: 'submit user form failure (src.forms.formsLogic)'
  }
  actions: {
    setUserFormValue: (key: string, value: any) => void
    setUserFormValues: (values: Partial<UserFormType>) => void
    touchUserFormField: (key: string) => void
    resetUserForm: (values?: UserFormType) => void
    submitUserForm: () => void
    submitUserFormRequest: (userForm: UserFormType) => void
    submitUserFormSuccess: (userForm: UserFormType) => void
    submitUserFormFailure: (error: Error) => void
  }
  constants: {}
  defaults: {
    userForm: UserFormType
    userFormChanges: DeepPartial<UserFormType>
    userFormTouches: DeepPartialMap<UserFormType, boolean>
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
  }
  events: {}
  key: undefined
  listeners: {}
  path: ['src', 'forms', 'formsLogic']
  pathString: 'src.forms.formsLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: () => any,
    fullState: any
  ) => {
    userForm: UserFormType
    userFormChanges: DeepPartial<UserFormType>
    userFormTouches: DeepPartialMap<UserFormType, boolean>
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
  }
  reducerOptions: {}
  reducers: {
    userForm: (state: UserFormType, action: any, fullState: any) => UserFormType
    userFormChanges: (state: DeepPartial<UserFormType>, action: any, fullState: any) => DeepPartial<UserFormType>
    userFormTouches: (
      state: DeepPartialMap<UserFormType, boolean>,
      action: any,
      fullState: any
    ) => DeepPartialMap<UserFormType, boolean>
    isUserFormSubmitting: (state: boolean, action: any, fullState: any) => boolean
    showUserFormErrors: (state: boolean, action: any, fullState: any) => boolean
  }
  selector: (state: any) => {
    userForm: UserFormType
    userFormChanges: DeepPartial<UserFormType>
    userFormTouches: DeepPartialMap<UserFormType, boolean>
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
  }
  selectors: {
    userForm: (state: any, props?: any) => UserFormType
    userFormChanges: (state: any, props?: any) => DeepPartial<UserFormType>
    userFormTouches: (state: any, props?: any) => DeepPartialMap<UserFormType, boolean>
    isUserFormSubmitting: (state: any, props?: any) => boolean
    showUserFormErrors: (state: any, props?: any) => boolean
    userFormChanged: (state: any, props?: any) => boolean
    userFormTouched: (state: any, props?: any) => boolean
    userFormValidationErrors: (state: any, props?: any) => DeepPartialMap<UserFormType, ValidationErrorType>
    userFormHasErrors: (state: any, props?: any) => boolean
    userFormErrors: (state: any, props?: any) => DeepPartialMap<UserFormType, ValidationErrorType>
    isUserFormValid: (state: any, props?: any) => boolean
  }
  sharedListeners: {}
  values: {
    userForm: UserFormType
    userFormChanges: DeepPartial<UserFormType>
    userFormTouches: DeepPartialMap<UserFormType, boolean>
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
    userFormChanged: boolean
    userFormTouched: boolean
    userFormValidationErrors: DeepPartialMap<UserFormType, ValidationErrorType>
    userFormHasErrors: boolean
    userFormErrors: DeepPartialMap<UserFormType, ValidationErrorType>
    isUserFormValid: boolean
  }
  _isKea: true
  _isKeaWithKey: false
  __keaTypeGenInternalExtraInput: {
    forms:
      | {
          userForm?: {
            defaults?: UserFormType
            submit?: (form: UserFormType) => void
            validator?: (form: UserFormType) => DeepPartialMap<UserFormType, ValidationErrorType>
          }
        }
      | ((logic: formsLogicType<UserFormType>) => {
          userForm?: {
            defaults?: UserFormType
            submit?: (form: UserFormType) => void
            validator?: (form: UserFormType) => DeepPartialMap<UserFormType, ValidationErrorType>
          }
        })
  }
}
