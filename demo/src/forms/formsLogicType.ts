// Generated by kea-typegen on Fri, 22 Apr 2022 22:38:37 GMT. DO NOT EDIT THIS FILE MANUALLY.

import { Logic } from 'kea'

import { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from '../../node_modules/kea-forms'

export interface formsLogicType<UserFormType> extends Logic {
  actionCreators: {
    setUserFormValue: (
      key: FieldName,
      value: any
    ) => {
      type: 'set user form value (src.forms.formsLogic)'
      payload: {
        name: FieldName
        value: any
      }
    }
    setUserFormValues: (values: DeepPartial<UserFormType>) => {
      type: 'set user form values (src.forms.formsLogic)'
      payload: {
        values: DeepPartial<UserFormType>
      }
    }
    touchUserFormField: (key: string) => {
      type: 'touch user form field (src.forms.formsLogic)'
      payload: {
        key: string
      }
    }
    resetUserForm: (values?: UserFormType) => {
      type: 'reset user form (src.forms.formsLogic)'
      payload: {
        values?: UserFormType
      }
    }
    submitUserForm: () => {
      type: 'submit user form (src.forms.formsLogic)'
      payload: {
        value: boolean
      }
    }
    submitUserFormRequest: (userForm: UserFormType) => {
      type: 'submit user form request (src.forms.formsLogic)'
      payload: {
        userForm: UserFormType
      }
    }
    submitUserFormSuccess: (userForm: UserFormType) => {
      type: 'submit user form success (src.forms.formsLogic)'
      payload: {
        userForm: UserFormType
      }
    }
    submitUserFormFailure: (error: Error) => {
      type: 'submit user form failure (src.forms.formsLogic)'
      payload: {
        error: Error
      }
    }
    removeAccount: (index: number) => {
      type: 'remove account (src.forms.formsLogic)'
      payload: {
        index: number
      }
    }
  }
  actionKeys: {
    'set user form value (src.forms.formsLogic)': 'setUserFormValue'
    'set user form values (src.forms.formsLogic)': 'setUserFormValues'
    'touch user form field (src.forms.formsLogic)': 'touchUserFormField'
    'reset user form (src.forms.formsLogic)': 'resetUserForm'
    'submit user form (src.forms.formsLogic)': 'submitUserForm'
    'submit user form request (src.forms.formsLogic)': 'submitUserFormRequest'
    'submit user form success (src.forms.formsLogic)': 'submitUserFormSuccess'
    'submit user form failure (src.forms.formsLogic)': 'submitUserFormFailure'
    'remove account (src.forms.formsLogic)': 'removeAccount'
  }
  actionTypes: {
    setUserFormValue: 'set user form value (src.forms.formsLogic)'
    setUserFormValues: 'set user form values (src.forms.formsLogic)'
    touchUserFormField: 'touch user form field (src.forms.formsLogic)'
    resetUserForm: 'reset user form (src.forms.formsLogic)'
    submitUserForm: 'submit user form (src.forms.formsLogic)'
    submitUserFormRequest: 'submit user form request (src.forms.formsLogic)'
    submitUserFormSuccess: 'submit user form success (src.forms.formsLogic)'
    submitUserFormFailure: 'submit user form failure (src.forms.formsLogic)'
    removeAccount: 'remove account (src.forms.formsLogic)'
  }
  actions: {
    setUserFormValue: (key: FieldName, value: any) => void
    setUserFormValues: (values: DeepPartial<UserFormType>) => void
    touchUserFormField: (key: string) => void
    resetUserForm: (values?: UserFormType) => void
    submitUserForm: () => void
    submitUserFormRequest: (userForm: UserFormType) => void
    submitUserFormSuccess: (userForm: UserFormType) => void
    submitUserFormFailure: (error: Error) => void
    removeAccount: (index: number) => void
  }
  defaults: {
    userForm: UserFormType
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
    userFormChanged: boolean
    userFormTouches: Record<string, boolean>
  }
  events: {}
  key: undefined
  listeners: {}
  path: ['src', 'forms', 'formsLogic']
  pathString: 'src.forms.formsLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    userForm: UserFormType
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
    userFormChanged: boolean
    userFormTouches: Record<string, boolean>
  }
  reducers: {
    userForm: (state: UserFormType, action: any, fullState: any) => UserFormType
    isUserFormSubmitting: (state: boolean, action: any, fullState: any) => boolean
    showUserFormErrors: (state: boolean, action: any, fullState: any) => boolean
    userFormChanged: (state: boolean, action: any, fullState: any) => boolean
    userFormTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>
  }
  selector: (state: any) => {
    userForm: UserFormType
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
    userFormChanged: boolean
    userFormTouches: Record<string, boolean>
  }
  selectors: {
    userForm: (state: any, props?: any) => UserFormType
    isUserFormSubmitting: (state: any, props?: any) => boolean
    showUserFormErrors: (state: any, props?: any) => boolean
    userFormChanged: (state: any, props?: any) => boolean
    userFormTouches: (state: any, props?: any) => Record<string, boolean>
    userFormTouched: (state: any, props?: any) => boolean
    userFormValidationErrors: (state: any, props?: any) => DeepPartialMap<UserFormType, ValidationErrorType>
    userFormHasErrors: (state: any, props?: any) => boolean
    userFormErrors: (state: any, props?: any) => DeepPartialMap<UserFormType, ValidationErrorType>
    isUserFormValid: (state: any, props?: any) => boolean
  }
  sharedListeners: {}
  values: {
    userForm: UserFormType
    isUserFormSubmitting: boolean
    showUserFormErrors: boolean
    userFormChanged: boolean
    userFormTouches: Record<string, boolean>
    userFormTouched: boolean
    userFormValidationErrors: DeepPartialMap<UserFormType, ValidationErrorType>
    userFormHasErrors: boolean
    userFormErrors: DeepPartialMap<UserFormType, ValidationErrorType>
    isUserFormValid: boolean
  }
  _isKea: true
  _isKeaWithKey: false
}
